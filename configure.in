AC_PREREQ(2.59)
AC_INIT(enblend-enfuse,
        [m4_esyscmd([tr -d '\n' < VERSION])],
        [https://bugs.launchpad.net/enblend])
AC_CONFIG_SRCDIR([src/enblend.cc])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_MACRO_DIR(m4)
AM_INIT_AUTOMAKE([-Wall])
AC_CONFIG_HEADER([config.h])

# Checks for programs/compilers.
# avoid default CXXFLAGS, they trigger a compiler error with g++ 4.2
CXXFLAGS_ORIG=$CXXFLAGS
AC_PROG_CXX
CXXFLAGS=$CXXFLAGS_ORIG
AC_PROG_CC
AC_PROG_RANLIB
AC_LANG(C++)
#CXXFLAGS =

AC_C_BIGENDIAN

# Checks for libraries.
AC_CHECK_LIB(z, gzopen,
             [],
             AC_MSG_NOTICE([Compiling without libz.]), [])
AC_CHECK_LIB(jpeg, jpeg_finish_compress,
             [LIBS="-ljpeg ${LIBS}"; AC_DEFINE(HasJPEG, 1, [Define if you have the jpeg library])],
             AC_MSG_NOTICE([Compiling without support for jpeg files.]), [])
AC_CHECK_LIB(png, png_init_io,
             [LIBS="-lpng ${LIBS}"; AC_DEFINE(HasPNG, 1, [Define if you have the png library])],
             AC_MSG_NOTICE([Compiling without support for png files.]), [])
AC_CHECK_LIB(tiff, TIFFOpen,
             [LIBS="-ltiff ${LIBS}"; AC_DEFINE(HasTIFF, 1, [Define if you have the tiff library])],
             AC_MSG_ERROR([libtiff is required to compile Enblend.]), [])
AC_CHECK_LIB(lcms, cmsCreateTransform,
             [],
             AC_MSG_ERROR([liblcms is required to compile Enblend.]), [])
AC_CHECK_LIB(xmi, miNewPaintedSet,
             [],
             AC_MSG_ERROR([libxmi is required to compile Enblend.]), [])
PKG_CHECK_MODULES(OPENEXR, OpenEXR >= 1.0,
                  [AC_DEFINE(HasEXR, 1, [Define if you have EXR library])
                   have_exr=yes],
                  [AC_MSG_WARN("OpenEXR support disabled: " $OPENEXR_PKG_ERRORS)
                   have_exr=no])

LIBS="${OPENEXR_LIBS} $LIBS"
CFLAGS="${OPENEXR_CFLAGS} $CFLAGS"
CXXFLAGS="${OPENEXR_CFLAGS} $CXXFLAGS"

if test "x$GXX" = xyes; then
    # Fixes SourceForge bug id 2121647 on some systems with newer GCCs.
    CXXFLAGS="$CXXFLAGS --param inline-unit-growth=60"
fi

can_use_gpu=no
missing_for_gpu=
no_gpu_reason=
AC_ARG_WITH([apple-opengl-framework],
            [AC_HELP_STRING([--with-apple-opengl-framework],
                            [use Apple OpenGL framework (Mac OS X only)])])
if test "X$with_apple_opengl_framework" = "Xyes"; then
    AX_CHECK_APPLE_OPENGL
else
    AX_CHECK_GL
    AX_CHECK_GLU
    AX_CHECK_GLUT
fi
if test "X$no_gl" = Xyes; then
    missing_for_gpu="$missing_for_gpu GL"
    AC_MSG_WARN([[GL not found, disabling GPU mode]])
elif test "X$no_glu" = Xyes; then
    missing_for_gpu="$missing_for_gpu GLU"
    AC_MSG_WARN([[GLU not found, disabling GPU mode]])
elif test "X$no_glut" = Xyes; then
    missing_for_gpu="$missing_for_gpu GLUT"
    AC_MSG_WARN([[GLUT not found, disabling GPU mode]])
else
    can_use_gpu=yes
    # GLUT_LIBS and GLU_LIBS include GL_LIBS implicitly
    LIBS="${GLU_LIBS} ${GLUT_LIBS} $LIBS"
    CFLAGS="${GL_CFLAGS} $CFLAGS"
fi
AC_CHECK_LIB(GLEW, glewInit,
             [no_glew=no],
             [no_glew=yes
              can_use_gpu=no
              missing_for_gpu="$missing_for_gpu GLEW"
              AC_MSG_WARN([[GLEW not found, disabling GPU mode.]])],
             [])
if test $can_use_gpu = no; then
    no_gpu_reason=", because of missing$missing_for_gpu"
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC

# The check for ext/slist fails on OSX, just remove it and declare that
# it is available anyhow (Its part of the GNU stl implementation)
#AC_CHECK_HEADER(ext/slist,
#                AC_DEFINE(HAVE_EXT_SLIST, 1, Define if you have the <ext/slist> header file),
#                AC_MSG_WARN([ext/slist is required to compile Enblend]))
AC_DEFINE(HAVE_EXT_SLIST, 1, [Define if you have the <ext/slist> header file])

AC_CHECK_HEADERS([fenv.h limits.h stdlib.h string.h unistd.h])

AC_CHECK_HEADER(tiffio.h, [],
                AC_MSG_ERROR([libtiff-devel header files are required to compile Enblend.]))
AC_CHECK_HEADER(jpeglib.h, [],
                AC_MSG_ERROR([libjpeg-devel header files are required to compile Enblend.]))
AC_CHECK_HEADER(png.h, [],
                AC_MSG_ERROR([libpng-devel header files are required to compile Enblend.]))

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADER(boost/pool/pool.hpp, [],
                AC_MSG_ERROR([Boost "pool" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/random/mersenne_twister.hpp, [],
                AC_MSG_ERROR([Boost "mersenne_twister" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/scoped_ptr.hpp, [],
                AC_MSG_ERROR([Boost "scoped_ptr" header file is required to compile Enblend.]))
AC_CHECK_HEADER(boost/static_assert.hpp, [],
                AC_MSG_ERROR([Boost "static_assert" header file is required to compile Enblend.]))

AC_ARG_WITH([boost-filesystem],
            [AS_HELP_STRING([--with-boost-filesystem],
             [use Boost filesystem library @<:@default=check@:>@])],
            [],
            [with_boost_filesystem=check])
AS_IF([test "x$with_boost_filesystem" == xNO \
         -o "x$with_boost_filesystem" == xNo \
         -o "x$with_boost_filesystem" == xno],
      [AC_MSG_NOTICE([disabling use of Boost "filesystem" library])],
      [AS_IF([test "x$with_boost_filesystem" == xYES \
                -o "x$with_boost_filesystem" == xYes \
                -o "x$with_boost_filesystem" == xyes],
             [AC_MSG_NOTICE([forcing use of Boost "filesystem" library])
              AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
                        [Define if you have boost/filesystem.hpp])
              EXTRA_LIBS="-lboost_filesystem ${EXTRA_LIBS}"],
             [AC_CHECK_HEADER(boost/filesystem.hpp,
                              [AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
                                         [Define if you have boost/filesystem.hpp])],
                              AC_MSG_NOTICE([Boost "filesystem" header is missing.]))
              if test x$ac_cv_header_boost_filesystem_hpp = xyes; then
                  if test "x$with_boost_filesystem" != xCHECK \
                       -a "x$with_boost_filesystem" != xCheck \
                       -a "x$with_boost_filesystem" != xcheck; then
                      boost_filesystem_lib=$with_boost_filesystem
                  elif test x$acx_pthread_ok = xyes; then
                      boost_filesystem_lib="-lboost_filesystem-mt"
                  else
                      boost_filesystem_lib="-lboost_filesystem"
                  fi
                  AC_LINK_IFELSE($boost_filesystem_lib,
                                 [AC_LANG_CONFTEST(AC_LANG_PROGRAM([[
#include <string>
#include "boost/filesystem.hpp"
]],
[[
boost::filesystem::basic_path<std::string, boost::filesystem::path_traits> basic_path p("foo/bar/baz.oo");
p.branch_path().string();
p.leaf();
basename(p);
extension(p);
]]
))],
                                 [EXTRA_LIBS="$boost_filesystem_lib ${EXTRA_LIBS}"
                                  AC_MSG_NOTICE([compiling with Boost's generic filename parsing support.])],
                                 [AC_MSG_NOTICE([Boost "filesystem" library missing: compiling with built-in support.])])
              fi
             ] ) dnl AS_IF($with_boost_filesystem == yes)
      ] ) dnl  AS_IF($with_boost_filesystem == no)
AC_LANG_RESTORE
AC_SUBST(EXTRA_LIBS)

AC_CHECK_HEADER(lcms.h, [],
                AC_MSG_ERROR([lcms header files are required to compile Enblend.]))
AC_CHECK_HEADER(xmi.h, [],
                AC_MSG_ERROR([xmi header files are required to compile Enblend.]))

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE

AC_TYPE_OFF_T
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FSEEKO
# AC_FUNC_MALLOC         dnl unused and harmful when cross compiling
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_STRERROR_R
AC_FUNC_STRTOD

AC_CHECK_FUNCS([fesetround floor \
                memset mkstemp \
                pow \
                sqrt strchr strcspn strdup strerror strrchr strtol])

# lrint and lrintf
AC_C99_FUNC_LRINT
AC_C99_FUNC_LRINTF

# Documentation
if test $cross_compiling = no; then
    AM_MISSING_PROG(HELP2MAN, help2man)
else
    HELP2MAN=:
fi

can_build_doc=yes
AC_CHECK_PROG(GNUPLOT,
              gnuplot,
              gnuplot,
              false)
if test "x$GNUPLOT" = xfalse; then
    AC_MSG_WARN(Cannot find gnuplot; will not be able to build documentation.)
    can_build_doc=no
    missing_for_doc="$missing_for_doc gnuplot"
fi

AC_ARG_WITH([ttf-path],
            AC_HELP_STRING([--with-ttf-path=<PATH>],
                           [set path to TrueType fonts]),
            [GDFONTPATH="$withval"],
            [GDFONTPATH="/opt/local/share/fonts/freefont-ttf:/sw/share/fonts/freefont-ttf:/usr/X11/lib/X11/fonts/TTF:/usr/X11R6/lib/X11/fonts/TTF:/usr/share/fonts/truetype/freefont"])
AC_ARG_VAR(GDFONTPATH, [path to TrueType fonts])
have_freesans_font=no
orig_ifs="$IFS"
IFS=':'
for dir in $GDFONTPATH; do \
    if test -f "$dir/FreeSans.ttf"; then \
        have_freesans_font=yes; \
        break; \
    fi; \
done
IFS="$orig_ifs"
if test $have_freesans_font != yes; then
    AC_MSG_WARN(Cannot find font "FreeSans.ttf" anywhere in GDFONTPATH; text in the documentation's figures could look strange.)
fi

AC_CHECK_PROG(FIG2DEV,
              fig2dev,
              fig2dev,
              false)
if test "x$FIG2DEV" = xfalse; then
    AC_MSG_WARN(Cannot find fig2dev; will not be able to build documentation.)
    can_build_doc=no
    missing_for_doc="$missing_for_doc fig2dev"
fi

AC_PROG_SED

# These variables are mentioned in the AutoMake documentation as being
# influential to the documentation build process.
AC_CHECK_PROG(MAKEINFO,
              makeinfo,
              makeinfo,
              false)
if test "x$MAKEINFO" = xfalse; then
    AC_MSG_WARN(Cannot find makeinfo; will not be able to build documentation.)
    can_build_doc=no
    missing_for_doc="$missing_for_doc makeinfo"
fi

dnl AC_CHECK_PROG(TEXI2DVI,
dnl               texi2dvi,
dnl               texi2dvi,
dnl               false)
dnl if test "x$TEXI2DVI" = xfalse; then
dnl   AC_MSG_WARN(Cannot find texi2dvi; will not be able to build documentation.)
dnl   can_build_doc=no
dnl   missing_for_doc="$missing_for_doc texi2dvi"
dnl fi

dnl AC_CHECK_PROG(TEXI2PDF,
dnl               texi2pdf,
dnl               texi2pdf,
dnl               false)
dnl if test "x$TEXI2PDF" = xfalse; then
dnl   AC_MSG_WARN(Cannot find texi2pdf; will not be able to build documentation.)
dnl   can_build_doc=no
dnl   missing_for_doc="$missing_for_doc texi2pdf"
dnl fi

dnl AC_CHECK_PROG(DVIPS,
dnl               dvips,
dnl               dvips,
dnl               false)
dnl if test "x$DVIPS" = xfalse; then
dnl   AC_MSG_WARN(Cannot find dvips; will not be able to build documentation.)
dnl   can_build_doc=no
dnl   missing_for_doc="$missing_for_doc dvips"
dnl fi

AM_CONDITIONAL([BUILD_DOC], [test $can_build_doc = yes])
if test $can_build_doc = no; then
    no_doc_reason=", because of missing$missing_for_doc"
fi

AC_MSG_CHECKING([checking whether split documentation files])
split_doc_default="yes"
AC_ARG_ENABLE([split-doc],
              AC_HELP_STRING([--enable-split-doc],
                             [split documentation @<:@default=yes@:>@]),
              [split_doc=$enableval],
              [split_doc=$split_doc_default])
if test "x$split_doc" = "xyes" \
     -o "x$split_doc" = "xYES" \
     -o "x$split_doc" = "xYes"; then
    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS"
    AC_MSG_RESULT(yes)
    split_doc=yes
else
    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS --no-split --no-headers"
    AC_MSG_RESULT(no)
    split_doc=no
fi
AC_SUBST(AM_MAKEINFOFLAGS)

# use a static vigra impex library
CXXFLAGS="-DVIGRA_STATIC_LIB ${CXXFLAGS}"

AC_MSG_CHECKING(whether to enable debugging)
debug_default="no"
AC_ARG_ENABLE(debug,
              AC_HELP_STRING([--enable-debug],
                             [turn on debugging @<:@default=no@:>@]),
              [enable_debug=$enableval],
              [enable_debug=$debug_default])
if test "x$enable_debug" = "xyes" \
     -o "x$enable_debug" = "xYES" \
     -o "x$enable_debug" = "xYes"; then
    CXXFLAGS="$CXXFLAGS -g -DDEBUG -Wall"
    AC_MSG_RESULT(yes)
    enable_debug=yes
else
    CXXFLAGS="$CXXFLAGS -O3 -ffast-math -DNDEBUG -Wall"
    AC_MSG_RESULT(no)
    enable_debug=no
fi

AC_MSG_CHECKING(whether to enable image cache)
image_cache_default="yes"
AC_ARG_ENABLE(image_cache,
              AC_HELP_STRING([--enable-image-cache],
                             [allow for processing of large images @<:@default=yes@:>@]),
              [enable_image_cache=$enableval],
              [enable_image_cache=$image_cache_default])
if test "x$enable_image_cache" = "xyes" \
     -o "x$enable_image_cache" = "xYES" \
     -o "x$enable_image_cache" = "xYes"; then
    CXXFLAGS="$CXXFLAGS -DENBLEND_CACHE_IMAGES"
    AC_MSG_RESULT(yes)
    enable_image_cache=yes
else
    AC_MSG_RESULT(no)
    enable_image_cache=no
fi

AC_CONFIG_FILES([doc/entropy.gp
                 doc/entropy-cutoff.gp
                 doc/gaussian.gp
                 doc/laplacian-of-gaussian.gp
                 doc/sharp-edge.gp
                 doc/smooth-edge.gp])

AC_CONFIG_FILES([Makefile
                 include/Makefile
                 include/vigra/Makefile
                 include/vigra_ext/Makefile
                 src/Makefile
                 src/vigra_impex/Makefile
                 src/win32helpers/Makefile
                 doc/Makefile])
AC_OUTPUT

AC_MSG_RESULT([
 enblend-enfuse now configured for ${host}
   Source directory:               ${srcdir}
   Installation directory:         ${prefix}
   C++ compiler:                   ${CXX}
   CFLAGS needed for configure:    ${CFLAGS}
   CXXFLAGS needed for configure:  ${CXXFLAGS}
   LIBS needed for configure:      ${LIBS}
   EXTRA_LIBS (optional):          ${EXTRA_LIBS}

 can compile GPU acceleration:     ${can_use_gpu}${no_gpu_reason}
 can build all documentation:      ${can_build_doc}${no_doc_reason}

 feature selection:
   split *.info and *.html files:  ${split_doc}
   enable debugging support:       ${enable_debug}
   use image cache:                ${enable_image_cache}
])
