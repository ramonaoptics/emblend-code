AC_PREREQ(2.59)
AC_INIT(enblend, 3.1, [acmihal@users.sourceforge.net])
AC_CONFIG_SRCDIR([src/enblend.cc])
AM_INIT_AUTOMAKE
AC_CONFIG_HEADER([config.h])

# Checks for programs/compilers.
# avoid default CXXFLAGS, they trigger a compiler error with g++ 4.2
CXXFLAGS_ORIG=$CXXFLAGS
AC_PROG_CXX
CXXFLAGS=$CXXFLAGS_ORIG
AC_PROG_CC
AC_PROG_RANLIB
AC_LANG(C++)
#CXXFLAGS = 

AC_C_BIGENDIAN

# Checks for libraries.
#AC_CHECK_LIB(tiff,TIFFOpen,,AC_MSG_WARN([libtiff is required to compile enblend.]),[-ljpeg -lz -lm])
AC_CHECK_LIB(z,gzopen,,AC_MSG_NOTICE([zlib is required.]),[])
AC_CHECK_LIB(jpeg,jpeg_finish_compress,[LIBS="-ljpeg ${LIBS}";AC_DEFINE(HasJPEG,1,Define if you have the jpeg library)],AC_MSG_NOTICE([Compiling without support for jpeg files.]),[])
AC_CHECK_LIB(png,png_init_io,[LIBS="-lpng ${LIBS}";AC_DEFINE(HasPNG,1,Define if you have the png library)],AC_MSG_NOTICE([Compiling without support for png files.]),[])
AC_CHECK_LIB(tiff,TIFFOpen,[LIBS="-ltiff ${LIBS}";AC_DEFINE(HasTIFF,1,Define if you have the tiff library)],AC_MSG_ERROR([libtiff is required to compile enblend.]),[])
AC_CHECK_LIB(lcms,cmsCreateTransform,,AC_MSG_ERROR([liblcms is required to compile enblend.]),[])
AC_CHECK_LIB(xmi,miNewPaintedSet,,AC_MSG_ERROR([libxmi is required to compile enblend.]),[])
PKG_CHECK_MODULES(OPENEXR, OpenEXR >= 1.0,
  [AC_DEFINE(HasEXR,1,Define if you have EXR library)
  have_exr="yes"],[
AC_MSG_WARN( "OpenEXR support disabled: " $OPENEXR_PKG_ERRORS )
  have_exr="no"
]) #end of PKG_CHECK_MODULES

LIBS="${OPENEXR_LIBS} $LIBS"
CFLAGS="${OPENEXR_CFLAGS} $CFLAGS"
CXXFLAGS="${OPENEXR_CFLAGS} $CXXFLAGS"


# Replaced with custom M4 macros, JD Smith, June, 2007
#AC_CHECK_LIB(glut,glutInitDisplayMode,,AC_MSG_WARN([GLUT is required to compile enblend.]),[-lGL -lGLU])
#AC_CHECK_LIB(GLU,gluBeginCurve,,AC_MSG_WARN([libGLU is required to compile enblend.]),[])
#AC_CHECK_LIB(GL,glBegin,,AC_MSG_WARN([libGL is required to compile enblend.]),[])
#

AX_CHECK_GL
AX_CHECK_GLU
AX_CHECK_GLUT 
if test "$no_gl" = yes -o "$no_glu" = yes -o "$no_glut" = yes ; then 
     AC_MSG_WARN([WARNING: GL/GLU/GLUT not found, disabling GPU mode])
else
    # GLUT_LIBS and GLU_LIBS include GL_LIBS implicitly
    LIBS="${GLU_LIBS} ${GLUT_LIBS} $LIBS"
    CFLAGS="${GL_CFLAGS} $CFLAGS"
fi


AC_CHECK_LIB(GLEW,glewInit,,AC_MSG_WARN([GLEW not found. Disabling GPU mode.]),[])
#AC_CHECK_LIB(sh,main,,AC_MSG_WARN([libsh is required to compile enblend.]),[])
#AC_CHECK_LIB(brook,main,,AC_MSG_WARN([BrookGPU runtime libraries are required to compile enblend.]),[-logl -lcpu -lgpu])

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
# the check for ext/slist fails on OSX, just remove it and declare that
# it is available anyhow (Its part of the GNU stl implementation)
#AC_CHECK_HEADER(ext/slist,AC_DEFINE(HAVE_EXT_SLIST,1,Define if you have the <ext/slist> header file),AC_MSG_WARN([ext/slist is required to compile enblend]))
AC_DEFINE(HAVE_EXT_SLIST,1,Define if you have the <ext/slist> header file)
AC_CHECK_HEADERS([limits.h stdlib.h string.h unistd.h])
AC_CHECK_HEADER(tiffio.h,,AC_MSG_ERROR([libtiff-devel header files are required to compile enblend.]))
AC_CHECK_HEADER(jpeglib.h,,AC_MSG_ERROR([libjpeg-devel header files are required to compile enblend.]))
AC_CHECK_HEADER(png.h,,AC_MSG_ERROR([libpng-devel header files are required to compile enblend.]))

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADER(boost/random/mersenne_twister.hpp,,AC_MSG_ERROR([boost header files are required to compile enblend.]))
AC_CHECK_HEADER(boost/static_assert.hpp,,AC_MSG_ERROR([boost header files are required to compile enblend.]))
AC_CHECK_HEADER(boost/pool/pool.hpp,,AC_MSG_ERROR([boost header files are required to compile enblend.]))
AC_LANG_RESTORE

AC_CHECK_HEADER(lcms.h,,AC_MSG_ERROR([lcms header files are required to compile enblend.]))
AC_CHECK_HEADER(xmi.h,,AC_MSG_ERROR([xmi header files are required to compile enblend.]))

#AC_CHECK_HEADER(GL/glew.h,,AC_MSG_WARN([glew header files are required to compile enblend.]))
#AC_CHECK_HEADER(GL/glut.h,,AC_MSG_WARN([glut header files are required to compile enblend.]))
#AC_CHECK_HEADER(GL/gl.h,,AC_MSG_WARN([OpenGL gl.h header file is required to compile enblend.]))
#AC_CHECK_HEADER(GL/glx.h,,AC_MSG_WARN([OpenGL glx.h header file is required to compile enblend.]))
#AC_CHECK_HEADER(sh/sh.hpp,,AC_MSG_WARN([libsh header files are required to compile enblend.]))
#AC_CHECK_HEADER(brook/brook.hpp,,AC_MSG_WARN([BrookGPU header files are required to compile enblend.]))

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FSEEKO
AC_FUNC_MALLOC
#AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRTOD
AC_CHECK_FUNCS([floor memset pow rint sqrt strchr strerror strrchr mkstemp])

# lrint and lrintf
AC_C99_FUNC_LRINT
AC_C99_FUNC_LRINTF

# use a static vigra impex library
CXXFLAGS="-DVIGRA_STATIC_LIB ${CXXFLAGS}"

AC_MSG_CHECKING(whether to enable debugging)
debug_default="no"
AC_ARG_ENABLE(debug, [  --enable-debug=[no/yes] turn on debugging
                       [default=$debug_default]],, enable_debug=$debug_default)
if test "x$enable_debug" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -g -DDEBUG -Wall"
  AC_MSG_RESULT(yes)
else
  CXXFLAGS="$CXXFLAGS -O3 -ffast-math -DNDEBUG -Wall"
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable image cache)
image_cache_default="yes"
AC_ARG_ENABLE(image_cache, [  --enable-image-cache=[no/yes] enable image cache, allows processing of large files
                       [default=$image_cache_default]],, enable_image_cache=$image_cache_default)
if test "x$enable_image_cache" = "xyes"; then
  CXXFLAGS="$CXXFLAGS -DENBLEND_CACHE_IMAGES"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

AC_CONFIG_FILES([Makefile
                 doc/Makefile
                 include/Makefile
                 include/vigra/Makefile
                 include/vigra_ext/Makefile
                 src/Makefile
                 src/vigra_impex/Makefile
                 src/win32helpers/Makefile])
AC_OUTPUT

AC_MSG_RESULT([
 enblend now configured for ${host}
   Source directory:               ${srcdir}
   Installation directory:         ${prefix}
   C++ compiler:                   ${CXX}
   CFLAGS needed for configure:    ${CFLAGS}
   CXXFLAGS needed for configure:  ${CXXFLAGS}
   LIBS needed for configure:      ${LIBS}
])
