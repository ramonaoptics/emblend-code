#! /usr/bin/env perl


# This file is part of Enblend.
# Licence details can be found in the file COPYING.

# name:         gen_sig
# synopsis:     generate signature in Harry-van-der-Wolf style
# author:       Dr. Christoph L. Spiel
# perl version: 5.10.0


use strict;
use warnings;

use English;
use File::Basename;
use Sys::Hostname;


# Try to derive the real user name from Perl's built-in user id.
# Answer the user's login name if we do not find a real name.
sub get_real_user_name {
    my ($login_name, undef, undef, undef,
        undef, undef, $gcos) = getpwuid $REAL_USER_ID;
    my ($real_user_name) = split m/,/, $gcos;

    return $real_user_name eq '' ? $login_name : $real_user_name;
}


sub get_hostname {
    my $hostname = hostname();

    if ($OSNAME =~ m/MacOS/) {
        $hostname =~ s/^(.*?)[-.].*$/$1/;
    }

    return $hostname;
}


sub now {
    my @weekday = qw(Sun Mon Tue Wed Thu Fri Sat);
    my @monthname = qw(Jan Feb Mar May Jun Jul Aug Sep Oct Nov Dec);
    my ($second, $minute, $hour,
        $day_of_month, $month, $year,
        $day_of_week) = localtime;

    my $date = sprintf("%s, %s %02u %u",
                       $weekday[$day_of_week], $monthname[$month - 1],
                       $day_of_month, $year + 1900);
    my $time = sprintf("%02u:%02u:%02u",
                       $hour, $minute, $second);

    return $date, $time;
}


sub signature {
    my $user_name = get_real_user_name();
    my $host_name = get_hostname();
    my ($date, $time) = now();

    return "Compiled on $host_name by $user_name on $date, $time.";
}


sub octalize_string {
    my $string = shift;

    my $result;
    my $max_chars = 8;
    my $length = length $string;

    for (my $i = 1; $i <= $length; $i++) {
        $result .= sprintf "\\%03o", ord(substr $string, $i - 1, 1);
        if ($i % $max_chars == 0 and $i != $length) {
            $result .= qq("\n            ");
        }
    }

    return qq("$result");
}


sub emit_class {
    my ($signature, $checksum, $extra_checksum) = @_;

    print <<END_OF_CLASS;
#ifndef SIGNATURE_H_INCLUDED_
#define SIGNATURE_H_INCLUDED_

// This file is part of Enblend.
// Licence details can be found in the file COPYING.

#include <numeric>

class Signature
{
public:
    Signature(): checksum_(@{[sprintf "0%011o", $checksum]}U), neg_checksum_(0U) {}

    const char* message() const
    {
        return @{[octalize_string($signature)]};
    }

    void initialize()
    {
        neg_checksum_ = ~checksum_;
    }

    void check() const
    {
        if (generate_checksum() != checksum_ || checksum_ != ~neg_checksum_)
        {
            std::cerr << @{[octalize_string(qq(tampered binary\n))]};
            exit(1);
        }
    }

    unsigned generate_checksum() const
    {
        const char* m = message();
        return m == NULL ? 0U : std::accumulate(m, m + strlen(m), 0U) & 037777777777U;
    }

private:
    unsigned checksum_;
    unsigned neg_checksum_;
};

#endif // SIGNATURE_H_INCLUDED_
END_OF_CLASS
}


sub self_test {
    my $ok = 1;

    print "// self-test...\n";

    unless (get_real_user_name()) {
        print "// no user name\n";
        $ok = 0;
    }

    unless (get_hostname()) {
        print "// no hostname\n";
        $ok = 0;
    }

    my ($date, $time) = now();
    unless ($date) {
        print "// no date\n";
        $ok = 0;
    }
    unless ($time) {
        print "// no time\n";
        $ok = 0;
    }

    print "// passed\n" if $ok;
}


sub main {
    if ($ARGV[0] and $ARGV[0] =~ m/--extra=(.*)/) {
        my $sig = signature();
        emit_class($sig, unpack("%32C*", $sig), unpack("%32C*", $1));
    } else {
        self_test();
    }
}


main();
